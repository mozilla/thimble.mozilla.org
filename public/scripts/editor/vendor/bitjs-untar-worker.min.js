/**
 * archive.js - https://github.com/humphd/bitjs
 *
 * Provides base functionality for unarchiving.
 *
 * Licensed under the MIT License
 *
 * Copyright(c) 2011 Google Inc.
 */
var bitjs=bitjs||{};bitjs.archive=bitjs.archive||{},function(){bitjs.base=function(me,opt_methodName,var_args){var caller=arguments.callee.caller;if(caller.superClass_)return caller.superClass_.constructor.apply(me,Array.prototype.slice.call(arguments,1));for(var args=Array.prototype.slice.call(arguments,2),foundCaller=!1,ctor=me.constructor;ctor;ctor=ctor.superClass_&&ctor.superClass_.constructor)if(ctor.prototype[opt_methodName]===caller)foundCaller=!0;else if(foundCaller)return ctor.prototype[opt_methodName].apply(me,args);if(me[opt_methodName]===caller)return me.constructor.prototype[opt_methodName].apply(me,args);throw Error("goog.base called from a method of one name to a method of a different name")},bitjs.inherits=function(childCtor,parentCtor){function tempCtor(){}tempCtor.prototype=parentCtor.prototype,childCtor.superClass_=parentCtor.prototype,childCtor.prototype=new tempCtor,childCtor.prototype.constructor=childCtor},bitjs.archive.UnarchiveEvent=function(type){this.type=type},bitjs.archive.UnarchiveEvent.Type={START:"start",PROGRESS:"progress",EXTRACT:"extract",FINISH:"finish",INFO:"info",ERROR:"error"},bitjs.archive.UnarchiveInfoEvent=function(msg){bitjs.base(this,bitjs.archive.UnarchiveEvent.Type.INFO),this.msg=msg},bitjs.inherits(bitjs.archive.UnarchiveInfoEvent,bitjs.archive.UnarchiveEvent),bitjs.archive.UnarchiveErrorEvent=function(msg){bitjs.base(this,bitjs.archive.UnarchiveEvent.Type.ERROR),this.msg=msg},bitjs.inherits(bitjs.archive.UnarchiveErrorEvent,bitjs.archive.UnarchiveEvent),bitjs.archive.UnarchiveStartEvent=function(){bitjs.base(this,bitjs.archive.UnarchiveEvent.Type.START)},bitjs.inherits(bitjs.archive.UnarchiveStartEvent,bitjs.archive.UnarchiveEvent),bitjs.archive.UnarchiveFinishEvent=function(){bitjs.base(this,bitjs.archive.UnarchiveEvent.Type.FINISH)},bitjs.inherits(bitjs.archive.UnarchiveFinishEvent,bitjs.archive.UnarchiveEvent),bitjs.archive.UnarchiveProgressEvent=function(currentFilename,currentFileNumber,currentBytesUnarchivedInFile,currentBytesUnarchived,totalUncompressedBytesInArchive,totalFilesInArchive){bitjs.base(this,bitjs.archive.UnarchiveEvent.Type.PROGRESS),this.currentFilename=currentFilename,this.currentFileNumber=currentFileNumber,this.currentBytesUnarchivedInFile=currentBytesUnarchivedInFile,this.totalFilesInArchive=totalFilesInArchive,this.currentBytesUnarchived=currentBytesUnarchived,this.totalUncompressedBytesInArchive=totalUncompressedBytesInArchive},bitjs.inherits(bitjs.archive.UnarchiveProgressEvent,bitjs.archive.UnarchiveEvent),bitjs.archive.UnarchiveExtractEvent=function(unarchivedFile){bitjs.base(this,bitjs.archive.UnarchiveEvent.Type.EXTRACT),this.unarchivedFile=unarchivedFile},bitjs.inherits(bitjs.archive.UnarchiveExtractEvent,bitjs.archive.UnarchiveEvent),bitjs.archive.Unarchiver=function(arrayBuffer,opt_pathToBitJS){this.ab=arrayBuffer,this.pathToBitJS_=opt_pathToBitJS||"",this.listeners_={};for(var type in bitjs.archive.UnarchiveEvent.Type)this.listeners_[bitjs.archive.UnarchiveEvent.Type[type]]=[]},bitjs.archive.Unarchiver.prototype.worker_=null,bitjs.archive.Unarchiver.prototype.getScriptFileName=function(){throw"Subclasses of AbstractUnarchiver must overload getScriptFileName()"},bitjs.archive.Unarchiver.prototype.addEventListener=function(type,listener){type in this.listeners_&&-1==this.listeners_[type].indexOf(listener)&&this.listeners_[type].push(listener)},bitjs.archive.Unarchiver.prototype.removeEventListener=function(type,listener){if(type in this.listeners_){var index=this.listeners_[type].indexOf(listener);-1!=index&&this.listeners_[type].splice(index,1)}},bitjs.archive.Unarchiver.prototype.handleWorkerEvent_=function(e){(e instanceof bitjs.archive.UnarchiveEvent||e.type)&&this.listeners_[e.type]instanceof Array?(this.listeners_[e.type].forEach(function(listener){listener(e)}),e.type==bitjs.archive.UnarchiveEvent.Type.FINISH&&this.worker_.terminate()):console.log(e)},bitjs.archive.Unarchiver.prototype.start=function(){var me=this,scriptFileName=this.pathToBitJS_+this.getScriptFileName();scriptFileName&&(this.worker_=new Worker(scriptFileName),this.worker_.onerror=function(e){throw console.log("Worker error: message = "+e.message),e},this.worker_.onmessage=function(e){"string"==typeof e.data?console.log(e.data):me.handleWorkerEvent_(e.data)},this.worker_.postMessage({file:this.ab}))},bitjs.archive.Unarchiver.prototype.stop=function(){this.worker_&&this.worker_.terminate()},bitjs.archive.Unzipper=function(arrayBuffer,opt_pathToBitJS){bitjs.base(this,arrayBuffer,opt_pathToBitJS)},bitjs.inherits(bitjs.archive.Unzipper,bitjs.archive.Unarchiver),bitjs.archive.Unzipper.prototype.getScriptFileName=function(){return"unzip.js"},bitjs.archive.Unrarrer=function(arrayBuffer,opt_pathToBitJS){bitjs.base(this,arrayBuffer,opt_pathToBitJS)},bitjs.inherits(bitjs.archive.Unrarrer,bitjs.archive.Unarchiver),bitjs.archive.Unrarrer.prototype.getScriptFileName=function(){return"unrar.js"},bitjs.archive.Untarrer=function(arrayBuffer,opt_pathToBitJS){bitjs.base(this,arrayBuffer,opt_pathToBitJS)},bitjs.inherits(bitjs.archive.Untarrer,bitjs.archive.Unarchiver),bitjs.archive.Untarrer.prototype.getScriptFileName=function(){return"untar.js"}}();var bitjs=bitjs||{};bitjs.io=bitjs.io||{},function(){bitjs.BIT=[1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];var BITMASK=[0,1,3,7,15,31,63,127,255];bitjs.io.BitStream=function(ab,rtl,opt_offset,opt_length){if(!ab||!ab.toString||"[object ArrayBuffer]"!==ab.toString())throw"Error! BitArray constructed with an invalid ArrayBuffer object";var offset=opt_offset||0,length=opt_length||ab.byteLength;this.bytes=new Uint8Array(ab,offset,length),this.bytePtr=0,this.bitPtr=0,this.peekBits=rtl?this.peekBits_rtl:this.peekBits_ltr},bitjs.io.BitStream.prototype.peekBits_ltr=function(n,movePointers){if(0>=n||"number"!=typeof n)return 0;for(var movePointers=movePointers||!1,bytePtr=this.bytePtr,bitPtr=this.bitPtr,result=0,bitsIn=0,bytes=this.bytes;n>0;){if(bytePtr>=bytes.length)throw"Error!  Overflowed the bit stream! n="+n+", bytePtr="+bytePtr+", bytes.length="+bytes.length+", bitPtr="+bitPtr;var numBitsLeftInThisByte=8-bitPtr;if(n>=numBitsLeftInThisByte){var mask=BITMASK[numBitsLeftInThisByte]<<bitPtr;result|=(bytes[bytePtr]&mask)>>bitPtr<<bitsIn,bytePtr++,bitPtr=0,bitsIn+=numBitsLeftInThisByte,n-=numBitsLeftInThisByte}else{var mask=BITMASK[n]<<bitPtr;result|=(bytes[bytePtr]&mask)>>bitPtr<<bitsIn,bitPtr+=n,bitsIn+=n,n=0}}return movePointers&&(this.bitPtr=bitPtr,this.bytePtr=bytePtr),result},bitjs.io.BitStream.prototype.peekBits_rtl=function(n,movePointers){if(0>=n||"number"!=typeof n)return 0;for(var movePointers=movePointers||!1,bytePtr=this.bytePtr,bitPtr=this.bitPtr,result=0,bytes=this.bytes;n>0;){if(bytePtr>=bytes.length)throw"Error!  Overflowed the bit stream! n="+n+", bytePtr="+bytePtr+", bytes.length="+bytes.length+", bitPtr="+bitPtr;var numBitsLeftInThisByte=8-bitPtr;n>=numBitsLeftInThisByte?(result<<=numBitsLeftInThisByte,result|=BITMASK[numBitsLeftInThisByte]&bytes[bytePtr],bytePtr++,bitPtr=0,n-=numBitsLeftInThisByte):(result<<=n,result|=(bytes[bytePtr]&BITMASK[n]<<8-n-bitPtr)>>8-n-bitPtr,bitPtr+=n,n=0)}return movePointers&&(this.bitPtr=bitPtr,this.bytePtr=bytePtr),result},bitjs.io.BitStream.prototype.getBits=function(){return((255&this.bytes[this.bytePtr])<<16)+((255&this.bytes[this.bytePtr+1])<<8)+(255&this.bytes[this.bytePtr+2])>>>8-this.bitPtr&65535},bitjs.io.BitStream.prototype.readBits=function(n){return this.peekBits(n,!0)},bitjs.io.BitStream.prototype.peekBytes=function(n,movePointers){if(0>=n||"number"!=typeof n)return 0;for(;0!=this.bitPtr;)this.readBits(1);var movePointers=movePointers||!1,bytePtr=this.bytePtr,result=(this.bitPtr,this.bytes.subarray(bytePtr,bytePtr+n));return movePointers&&(this.bytePtr+=n),result},bitjs.io.BitStream.prototype.readBytes=function(n){return this.peekBytes(n,!0)},bitjs.io.ByteStream=function(ab,opt_offset,opt_length){var offset=opt_offset||0,length=opt_length||ab.byteLength;this.bytes=new Uint8Array(ab,offset,length),this.ptr=0},bitjs.io.ByteStream.prototype.peekNumber=function(n){if(0>=n||"number"!=typeof n)return-1;for(var result=0,curByte=this.ptr+n-1;curByte>=this.ptr;)result<<=8,result|=this.bytes[curByte],--curByte;return result},bitjs.io.ByteStream.prototype.readNumber=function(n){var num=this.peekNumber(n);return this.ptr+=n,num},bitjs.io.ByteStream.prototype.peekSignedNumber=function(n){var num=this.peekNumber(n),HALF=Math.pow(2,8*n-1),FULL=2*HALF;return num>=HALF&&(num-=FULL),num},bitjs.io.ByteStream.prototype.readSignedNumber=function(n){var num=this.peekSignedNumber(n);return this.ptr+=n,num},bitjs.io.ByteStream.prototype.peekBytes=function(n,movePointers){if(0>=n||"number"!=typeof n)return null;var result=this.bytes.subarray(this.ptr,this.ptr+n);return movePointers&&(this.ptr+=n),result},bitjs.io.ByteStream.prototype.readBytes=function(n){return this.peekBytes(n,!0)},bitjs.io.ByteStream.prototype.peekString=function(n){if(0>=n||"number"!=typeof n)return"";for(var result="",p=this.ptr,end=this.ptr+n;end>p;++p)result+=String.fromCharCode(this.bytes[p]);return result},bitjs.io.ByteStream.prototype.readString=function(n){var strToReturn=this.peekString(n);return this.ptr+=n,strToReturn},bitjs.io.ByteBuffer=function(numBytes){if("number"!=typeof numBytes||0>=numBytes)throw"Error! ByteBuffer initialized with '"+numBytes+"'";this.data=new Uint8Array(numBytes),this.ptr=0},bitjs.io.ByteBuffer.prototype.insertByte=function(b){this.data[this.ptr++]=b},bitjs.io.ByteBuffer.prototype.insertBytes=function(bytes){this.data.set(bytes,this.ptr),this.ptr+=bytes.length},bitjs.io.ByteBuffer.prototype.writeNumber=function(num,numBytes){if(1>numBytes)throw"Trying to write into too few bytes: "+numBytes;if(0>num)throw"Trying to write a negative number ("+num+") as an unsigned number to an ArrayBuffer";if(num>Math.pow(2,8*numBytes)-1)throw"Trying to write "+num+" into only "+numBytes+" bytes";for(var bytes=[];numBytes-->0;){var eightBits=255&num;bytes.push(eightBits),num>>=8}this.insertBytes(bytes)},bitjs.io.ByteBuffer.prototype.writeSignedNumber=function(num,numBytes){if(1>numBytes)throw"Trying to write into too few bytes: "+numBytes;var HALF=Math.pow(2,8*numBytes-1);if(num>=HALF||-HALF>num)throw"Trying to write "+num+" into only "+numBytes+" bytes";for(var bytes=[];numBytes-->0;){var eightBits=255&num;bytes.push(eightBits),num>>=8}this.insertBytes(bytes)},bitjs.io.ByteBuffer.prototype.writeASCIIString=function(str){for(var i=0;i<str.length;++i){var curByte=str.charCodeAt(i);if(0>curByte||curByte>255)throw"Trying to write a non-ASCII string!";this.insertByte(curByte)}}}();var currentFilename="",currentFileNumber=0,currentBytesUnarchivedInFile=0,currentBytesUnarchived=0,totalUncompressedBytesInArchive=0,totalFilesInArchive=0,info=function(str){postMessage(new bitjs.archive.UnarchiveInfoEvent(str))},err=function(str){postMessage(new bitjs.archive.UnarchiveErrorEvent(str))},postProgress=function(){postMessage(new bitjs.archive.UnarchiveProgressEvent(currentFilename,currentFileNumber,currentBytesUnarchivedInFile,currentBytesUnarchived,totalUncompressedBytesInArchive,totalFilesInArchive))},readCleanString=function(bstr,numBytes){var str=bstr.readString(numBytes),zIndex=str.indexOf(String.fromCharCode(0));return-1!=zIndex?str.substr(0,zIndex):str},TarLocalFile=function(bstream){if(this.isValid=!1,this.name=readCleanString(bstream,100),this.mode=readCleanString(bstream,8),this.uid=readCleanString(bstream,8),this.gid=readCleanString(bstream,8),this.size=parseInt(readCleanString(bstream,12),8),this.mtime=readCleanString(bstream,12),this.chksum=readCleanString(bstream,8),this.typeflag=readCleanString(bstream,1),this.linkname=readCleanString(bstream,100),this.maybeMagic=readCleanString(bstream,6),"ustar"==this.maybeMagic?(this.version=readCleanString(bstream,2),this.uname=readCleanString(bstream,32),this.gname=readCleanString(bstream,32),this.devmajor=readCleanString(bstream,8),this.devminor=readCleanString(bstream,8),this.prefix=readCleanString(bstream,155),this.prefix.length&&(this.name=this.prefix+this.name),bstream.readBytes(12)):bstream.readBytes(255),this.filename=this.name,this.fileData=null,info("Untarring file '"+this.filename+"'"),info("  size = "+this.size),info("  typeflag = "+this.typeflag),0==this.typeflag){info("  This is a regular file.");parseInt(this.size);this.fileData=new Uint8Array(bstream.bytes.buffer,bstream.ptr,this.size),this.name.length>0&&this.size>0&&this.fileData&&this.fileData.buffer&&(this.isValid=!0),bstream.readBytes(this.size);var remaining=512-this.size%512;remaining>0&&512>remaining&&bstream.readBytes(remaining)}else 5==this.typeflag&&info("  This is a directory.")},untar=function(arrayBuffer){currentFilename="",currentFileNumber=0,currentBytesUnarchivedInFile=0,currentBytesUnarchived=0,totalUncompressedBytesInArchive=0,totalFilesInArchive=0,postMessage(new bitjs.archive.UnarchiveStartEvent);for(var bstream=new bitjs.io.ByteStream(arrayBuffer),localFiles=[];0!=bstream.peekNumber(4);){var oneLocalFile=new TarLocalFile(bstream);oneLocalFile&&oneLocalFile.isValid&&(localFiles.push(oneLocalFile),totalUncompressedBytesInArchive+=oneLocalFile.size)}totalFilesInArchive=localFiles.length,localFiles.sort(function(a,b){var aname=a.filename,bname=b.filename;return aname>bname?1:-1}),localFiles.length>0&&postProgress();for(var i=0;i<localFiles.length;++i){var localfile=localFiles[i];info("Sending file '"+localfile.filename+"' up"),currentFilename=localfile.filename,currentFileNumber=i,currentBytesUnarchivedInFile=localfile.size,currentBytesUnarchived+=localfile.size,postMessage(new bitjs.archive.UnarchiveExtractEvent(localfile)),postProgress()}postProgress(),postMessage(new bitjs.archive.UnarchiveFinishEvent)};onmessage=function(event){var ab=event.data.file;untar(ab)};
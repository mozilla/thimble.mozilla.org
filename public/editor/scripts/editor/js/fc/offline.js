/**
 * Consolidate all online/offline and Service Worker events from both Thimble and Bramble.
 * The events we trigger include:
 *
 * - `updatesAvailable`: one of Thimble and/or Brackets has updates in the cache, user should reload
 * - `online`: the browser has re-established a network connection
 * - `offline`: the browser has lost its network connection
 *
 * You can also use `Offline.isOnline()` to check the online status.
 */
define(function(require) {

  var EventEmitter = require("EventEmitter");
  var Offline = new EventEmitter();

  /**
   * Service Worker offline cache registration. The thimble-sw.js file
   * is generated by Grunt as part of a dist/ build, and will not do anything
   * in dev builds.
   */
  function initServiceWorker() {
    if (!('serviceWorker' in window.navigator)) {
      return;
    }

    window.navigator.serviceWorker.register('/thimble-sw.js').then(function(reg) {
      reg.onupdatefound = function() {
        var installingWorker = reg.installing;

        installingWorker.onstatechange = function() {
          switch (installingWorker.state) {
          case 'installed':
            if (window.navigator.serviceWorker.controller) {
              // Cache has been updated
              Offline.trigger("updatesAvailable");
            }
            break;
          case 'redundant':
            console.error('[Thimble] The installing service worker became redundant.');
            break;
          }
        };
      };
    }).catch(function(e) {
      "use strict";
      console.error('[Bramble] Error during service worker registration:', e);
    });
  }

  Offline.init = function(Bramble) {
    initServiceWorker();

    // Listen for sw events from Bramble, and consolidate with our own.
    Bramble.on("updatesAvailable", function() {
      Offline.trigger("updatesAvailable");
    });
    Bramble.on("offlineReady", function() {
      Offline.trigger("offlineReady");
    });

    // Listen for online/offline events from the browser
    window.addEventListener("offline", function() {
      Offline.trigger("offline");
    }, false);
    window.addEventListener("online", function() {
      Offline.trigger("online");
    });
  };

  Offline.isOnline = function() {
    return navigator.onLine;
  };

  return Offline;
});
